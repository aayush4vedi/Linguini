{"version":3,"sources":["modules/config.js"],"names":["defaultUniversalModuleConfig","ios","subdirectory","versionable","detachable","includeInExpoClient","android","expoSdkUniversalModules","podName","libName","config","isNativeModule","defaults","defaultConfig","customConfigs","customConfig","Object","assign","expoSdkUniversalModulesConfigs","map","params","module","exports"],"mappings":"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","file":"../../modules/config.js","sourcesContent":["const defaultUniversalModuleConfig = {\n  ios: {\n    // subdirectory in which the module podspec is placed.\n    subdirectory: 'ios',\n    // whether when adding a new version of ABI\n    // the module should be versioned and released\n    // as eg. ABI28_0_0EXCamera\n    versionable: true,\n    // whether the module should be included in the newly created detached app.\n    detachable: true,\n    // whether the module should be included in Expo Client\n    includeInExpoClient: true,\n  },\n  android: {\n    // subdirectory in which the Android project can be found.\n    subdirectory: 'android',\n    // whether when adding a new version of ABI\n    // the module should be versioned and released\n    // as eg. abi28_2_0.expo.modules.camera\n    versionable: true,\n    // whether the module should be included in the newly created detached app,\n    // so when releasing a new version of expoview\n    // as eg. host.exp.exponent:expoview:28.2.0 the module will\n    // be assembled and uploaded to the local maven repo\n    detachable: true,\n    // whether the module should be included in Expo Client\n    includeInExpoClient: true,\n  },\n};\n\nconst expoSdkUniversalModules = [\n  // versioned modules\n  { podName: 'EXGL', libName: 'expo-gl' },\n  { podName: 'EXSMS', libName: 'expo-sms' },\n  { podName: 'EXCore', libName: 'expo-core' },\n  { podName: 'EXFont', libName: 'expo-font' },\n  { podName: 'EXPrint', libName: 'expo-print' },\n  { podName: 'EXCamera', libName: 'expo-camera' },\n  { podName: 'EXSensors', libName: 'expo-sensors' },\n  { podName: 'EXLocation', libName: 'expo-location' },\n  { podName: 'EXConstants', libName: 'expo-constants' },\n  { podName: 'EXFileSystem', libName: 'expo-file-system' },\n  { podName: 'EXPermissions', libName: 'expo-permissions' },\n  { podName: 'EXSegment', libName: 'expo-analytics-segment' },\n  { podName: 'EXMediaLibrary', libName: 'expo-media-library' },\n  { podName: 'EXFontInterface', libName: 'expo-font-interface' },\n  { podName: 'EXCameraInterface', libName: 'expo-camera-interface' },\n  { podName: 'EXSensorsInterface', libName: 'expo-sensors-interface' },\n  { podName: 'EXConstantsInterface', libName: 'expo-constants-interface' },\n  { podName: 'EXReactNativeAdapter', libName: 'expo-react-native-adapter' },\n  { podName: 'EXFileSystemInterface', libName: 'expo-file-system-interface' },\n  { podName: 'EXPermissionsInterface', libName: 'expo-permissions-interface' },\n  { podName: 'EXImageLoaderInterface', libName: 'expo-image-loader-interface' },\n  { podName: 'EXFaceDetectorInterface', libName: 'expo-face-detector-interface' },\n  {\n    podName: 'EXFaceDetector',\n    libName: 'expo-face-detector',\n    detachable: false,\n  },\n  { podName: 'EXBarCodeScannerInterface', libName: 'expo-barcode-scanner-interface' },\n  { podName: 'EXBarCodeScanner', libName: 'expo-barcode-scanner' },\n\n  // unversioned modules\n  {\n    podName: 'EXGL-CPP',\n    libName: 'expo-gl-cpp',\n    versionable: false,\n    config: {\n      ios: {\n        subdirectory: 'cpp',\n      },\n    },\n  },\n\n  // JS-only modules\n  {\n    libName: 'expo-asset',\n    isNativeModule: false,\n  },\n  {\n    libName: 'expo-module-template',\n    isNativeModule: false,\n  },\n];\n\nfunction defaults(defaultConfig, ...customConfigs) {\n  const config = { ...defaultConfig };\n  for (const customConfig of customConfigs) {\n    if (customConfig) {\n      Object.assign(config, customConfig || {});\n    }\n  }\n  return config;\n}\n\nconst expoSdkUniversalModulesConfigs = expoSdkUniversalModules.map(\n  ({ config, podName, libName, isNativeModule, ...params }) => {\n    return {\n      podName,\n      libName,\n      isNativeModule: isNativeModule == null ? true : isNativeModule,\n      config: {\n        ios: defaults(defaultUniversalModuleConfig.ios, params, config && config.ios),\n        android: defaults(defaultUniversalModuleConfig.android, params, config && config.android),\n      },\n    };\n  }\n);\n\nmodule.exports = {\n  expoSdkUniversalModulesConfigs,\n};\n"],"sourceRoot":"/xdl@50.9.0/src"}