{"version":3,"sources":["Project.js"],"names":["async","projectDir","packagerPort","expoServerPort","await","ProjectSettings","readPackagerInfoAsync","currentStatus","projectRoot","url","UrlUtils","constructManifestUrlAsync","isUrlFallback","getManifestUrlWithFallbackAsync","ErrorCode","NO_PROJECT_ROOT","_assertValidProjectRoot","rangeStart","let","port","freeportAsync","NO_PORT_FOUND","_getFreePortAsync","platform","errorCode","minLength","getPlatformSpecificBundleUrl","fullUrl","response","request","get","headers","statusCode","body","JSON","parse","e","ProjectUtils","logError","undefined","message","length","_getForPlatformAsync","manifest","android","googleServicesFile","contents","fs","readFile","path","resolve","_resolveGoogleServicesFile","resolver","strict","assetSchemas","ExpSchema","getAssetSchemasAsync","sdkVersion","filter","fieldPath","_","urls","Promise","all","map","pathOrURL","match","existsSync","err","Error","localAssetPath","manifestField","forEach","index","set","logMethod","logWarning","_resolveManifestAssets","options","exp","pkg","readConfigJsonAsync","configName","configFilenameAsync","NO_PACKAGE_JSON","slug","name","INVALID_MANIFEST","getSlugAsync","formData","append","releaseChannel","queryResult","Api","callMethodAsync","getLatestReleaseAsync","publicUrl","assetUrl","outputDir","_validatePackagerReadyAsync","pathToWrite","join","ensureDir","packagerOpts","isDev","dev","minify","iosBundle","androidBundle","_buildPublishBundlesAsync","_writeArtifactSafelyAsync","logger","global","info","publishOptions","_getPublishExpConfigAsync","assets","_fetchAndSaveAssetsAsync","dumpAssetmap","assetmap","asset","hash","stringify","hooks","assetUrlOverride","publishedTime","Date","toISOString","developer","tool","user","UserManager","ensureLoggedInAsync","id","username","bundleUrl","urljoin","dumpSourcemap","iosSourceMap","androidSourceMap","_maybeBuildSourceMapsAsync","force","iosMapPath","iosJsPath","androidMapPath","androidJsPath","truncateLastNLines","appendFile","debugHtml","exportForAppHosting","filePath","n","lines","readLastLines","read","to_vanquish","size","stat","truncate","paths","files","fileHashes","keyChunks","chunk","Object","keys","promises","key","logDebug","quiet","assetPath","p","copy","push","_saveAssetAsync","Analytics","logEvent","developerTool","Config","validationStatus","Doctor","validateWithNetworkAsync","ERROR","FATAL","PUBLISH_VALIDATION_ERROR","validPostPublishHooks","postPublish","hook","file","config","fn","_requireFromProject","error","_fn","HOOK_INITIALIZATION_ERROR","_fetchAndUploadAssetsAsync","_uploadArtifactsAsync","serverError","Sentry","captureException","_maybeWriteArtifactsToDiskAsync","ios","publishManifestPath","androidManifest","iosManifest","ExponentTools","getManifestAsync","hookOptions","log","msg","result","then","warn","stack","publishBundlePath","fullManifestUrl","replace","constantsPath","deleteLinesInFileAsync","regexFileAsync","isKernel","_handleKernelPublishedAsync","publishAsync","_createBlob","packagerInfo","startReactNativeServerAsync","reset","schema","joi","object","string","joiValidateAsync","INVALID_OPTIONS","toString","version","process","env","locales","getResolvedLocalesAsync","opts","entryPoint","Exp","determineEntryPointAsync","publishUrl","constructPublishUrlAsync","INVALID_BUNDLE","MINIMUM_BUNDLE_SIZE","sourceMapUrl","constructSourceMapUrlAsync","hostedAssetPrefix","assetsUrl","constructAssetsUrlAsync","iosAssetsJson","INVALID_ASSETS","androidAssetsJson","manifestAssets","absolutePath","md5hex","iosAssets","androidAssets","concat","_collectAssets","assetBundlePatterns","fullPatterns","bundledAssets","Set","shouldBundle","__packager_asset","some","minimatch","add","type","_configureExpForAssets","assetCdnPath","EXPO_CDN","uploadAssetsAsync","hostedUrl","keyName","artifactPath","artifact","dirname","errorMsg","writeFile","publishSourceMapPath","kernelBundleUrl","api","scheme","host","kernel","androidManifestPath","iosManifestPath","metas","metadata","missing","exists","relativePath","_readFileForUpload","isNode","createReadStream","data","Blob","current","boolean","mode","any","valid","expIds","array","regex","bundleIdentifier","configPrefix","package","FORCE_TURTLE_VERSION","forceTurtleVersion","buildAsync","includes","delayAsync","_waitForRunningAsync","verbose","stopReactNativeServerAsync","Watchman","addToPathAsync","unblockAndGetVersionAsync","nodeModulesPath","customLogReporterPath","assetExts","nonPersistent","maxWorkers","Versions","gteSdkVersion","userPackagerOpts","uniq","cliOpts","reduce","val","defaultCliPath","cliPath","nodePath","rnCliPath","_nodePathForProjectRoot","packagerProcess","child_process","fork","cwd","REACT_NATIVE_APP_ROOT","NODE_PATH","ELECTRON_RUN_AS_NODE","silent","setPackagerInfoAsync","packagerPid","pid","on","treekill","stdout","setEncoding","stderr","pipe","split","_logPackagerOutput","exitPromise","reject","once","code","packagerUrl","constructBundleUrlAsync","urlType","hostType","statusUrl","timeoutPromise","setTimeout","WAIT_FOR_PACKAGER_TIMEOUT","race","treekillAsync","stopExpoServerAsync","app","express","use","bodyParser","json","limit","urlencoded","extended","manifestHandler","req","res","getPackagerOptsAsync","bundleUrlPackagerOpts","xde","shouldExposeEnvironmentVariableInManifest","mainModuleName","guessMainModulePath","queryParams","constructBundleQueryParamsAsync","hostname","encodeURI","encodeURIComponent","debuggerHost","constructDebuggerHostAsync","logUrl","constructLogUrlAsync","hostUri","constructHostUriAsync","hostUUID","UserSettings","anonymousIdentifier","currentSession","getSessionAsync","manifestString","_cachedSignedManifest","signedManifest","unsignedManifest","signature","publishInfo","getPublishInfoAsync","args","hostInfo","server","serverVersion","require","serverDriver","serverOS","os","serverOSVersion","release","send","status","post","deviceId","deviceName","_handleDeviceLogs","close","expRc","readExpRcAsync","manifestPort","listen","address","saveRecentExpRootAsync","startExpoServerAsync","hostnameAsync","ngrokPid","attempts","configPath","dotExpoHomeDirectory","ngrokConnectAsync","NGROK_ERROR","error_code","kill","ngrokKillAsync","resetProjectRandomnessAsync","_connectToNgrokAsync","getCurrentUsernameAsync","NO_PACKAGER_PORT","NO_EXPO_SERVER_PORT","stopTunnelsAsync","Android","startAdbReverseAsync","logInfo","packageShortName","base","startedTunnelsSuccessfully","TUNNEL_TIMEOUT","expoServerNgrokUrl","authtoken","ngrok","authToken","proto","randomness","manifestTunnelRandomness","getProjectRandomnessAsync","domainify","domain","packagerNgrokUrl","logWithLevel","tag","_expoEventType","addListener","startTunnelsAsync","ngrokProcess","ngrokProcessPid","removeAllListeners","stopAdbReverseAsync","number","integer","setOptionsAsync","getUrlAsync","offline","DevSession","startSession","startAsync","stopSession","_stopInternalAsync","stopAsync","promisify","validate","connect","Request","defaults","resolveWithFullResponse","modulePath","indexOf","fullPath","decache","_stripPackagerOutputBox","output","re","found","level","_isIgnorableDuplicateModuleWarning","test","startsWith","reactNativeNodeModulesPath","reactNativeNodeModulesPattern","escapeRegExp","reactNativeNodeModulesCollisionRegex","RegExp","_isIgnorableBugReportingExtraData","logs","i","obj","DEBUG","groupDepth","shouldHide","includesStack","directory","parentDirectory","delimiter","blacklistedEnvironmentVariables","has","toUpperCase"],"mappings":"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","file":"../Project.js","sourcesContent":["/**\n * @flow\n */\n\nimport bodyParser from 'body-parser';\nimport child_process from 'child_process';\nimport delayAsync from 'delay-async';\nimport decache from 'decache';\nimport express from 'express';\nimport freeportAsync from 'freeport-async';\nimport fs from 'fs-extra';\nimport joi from 'joi';\nimport promisify from 'util.promisify';\nimport _ from 'lodash';\nimport minimatch from 'minimatch';\nimport ngrok from '@expo/ngrok';\nimport os from 'os';\nimport path from 'path';\nimport Request from 'request-promise-native';\nimport spawnAsync from '@expo/spawn-async';\nimport split from 'split';\nimport treekill from 'tree-kill';\nimport md5hex from 'md5hex';\nimport url from 'url';\nimport urljoin from 'url-join';\nimport readLastLines from 'read-last-lines';\n\nimport * as Analytics from './Analytics';\nimport * as Android from './Android';\nimport Api from './Api';\nimport Config from './Config';\nimport * as Doctor from './project/Doctor';\nimport * as DevSession from './DevSession';\nimport ErrorCode from './ErrorCode';\nimport logger from './Logger';\nimport * as ExponentTools from './detach/ExponentTools';\nimport * as Exp from './Exp';\nimport * as ExpSchema from './project/ExpSchema';\nimport FormData from './tools/FormData';\nimport { isNode } from './tools/EnvironmentHelper';\nimport * as ProjectSettings from './ProjectSettings';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport * as Sentry from './Sentry';\nimport * as UrlUtils from './UrlUtils';\nimport UserManager from './User';\nimport UserSettings from './UserSettings';\nimport * as Versions from './Versions';\nimport * as Watchman from './Watchman';\nimport XDLError from './XDLError';\n\nimport type { User as ExpUser } from './User'; //eslint-disable-line\n\nconst EXPO_CDN = 'https://d1wp6m56sqw74a.cloudfront.net';\nconst MINIMUM_BUNDLE_SIZE = 500;\nconst TUNNEL_TIMEOUT = 10 * 1000;\nconst WAIT_FOR_PACKAGER_TIMEOUT = 30 * 1000;\n\nconst joiValidateAsync = promisify(joi.validate);\nconst treekillAsync = promisify(treekill);\nconst ngrokConnectAsync = promisify(ngrok.connect);\nconst ngrokKillAsync = promisify(ngrok.kill);\nconst stat = promisify(fs.stat);\nconst truncate = promisify(fs.truncate);\nconst appendFile = promisify(fs.appendFile);\n\nconst request = Request.defaults({\n  resolveWithFullResponse: true,\n});\n\ntype CachedSignedManifest = {\n  manifestString: ?string,\n  signedManifest: ?string,\n};\n\nlet _cachedSignedManifest: CachedSignedManifest = {\n  manifestString: null,\n  signedManifest: null,\n};\n\nexport type ProjectStatus = 'running' | 'ill' | 'exited';\n\nexport async function currentStatus(projectDir: string): Promise<ProjectStatus> {\n  const { packagerPort, expoServerPort } = await ProjectSettings.readPackagerInfoAsync(projectDir);\n  if (packagerPort && expoServerPort) {\n    return 'running';\n  } else if (packagerPort || expoServerPort) {\n    return 'ill';\n  } else {\n    return 'exited';\n  }\n}\n\n// DECPRECATED: use UrlUtils.constructManifestUrlAsync\nexport async function getManifestUrlWithFallbackAsync(projectRoot: string) {\n  return {\n    url: await UrlUtils.constructManifestUrlAsync(projectRoot),\n    isUrlFallback: false,\n  };\n}\n\nasync function _assertValidProjectRoot(projectRoot) {\n  if (!projectRoot) {\n    throw new XDLError(ErrorCode.NO_PROJECT_ROOT, 'No project root specified');\n  }\n}\n\nasync function _getFreePortAsync(rangeStart) {\n  let port = await freeportAsync(rangeStart);\n  if (!port) {\n    throw new XDLError(ErrorCode.NO_PORT_FOUND, 'No available port found');\n  }\n\n  return port;\n}\n\nasync function _getForPlatformAsync(projectRoot, url, platform, { errorCode, minLength }) {\n  url = UrlUtils.getPlatformSpecificBundleUrl(url, platform);\n\n  let fullUrl = `${url}&platform=${platform}`;\n  let response = await request.get({\n    url: fullUrl,\n    headers: {\n      'Exponent-Platform': platform,\n    },\n  });\n\n  if (response.statusCode !== 200) {\n    if (response.body) {\n      let body;\n      try {\n        body = JSON.parse(response.body);\n      } catch (e) {\n        ProjectUtils.logError(projectRoot, 'expo', response.body);\n      }\n\n      if (body !== undefined) {\n        if (body.message) {\n          ProjectUtils.logError(projectRoot, 'expo', body.message);\n        } else {\n          ProjectUtils.logError(projectRoot, 'expo', response.body);\n        }\n      }\n    }\n    throw new XDLError(\n      errorCode,\n      `Packager URL ${fullUrl} returned unexpected code ${response.statusCode}. Please open your project in the Expo app and see if there are any errors. Also scroll up and make sure there were no errors or warnings when opening your project.`\n    );\n  }\n\n  if (!response.body || (minLength && response.body.length < minLength)) {\n    throw new XDLError(errorCode, `Body is: ${response.body}`);\n  }\n\n  return response.body;\n}\n\nasync function _resolveGoogleServicesFile(projectRoot, manifest) {\n  if (manifest.android && manifest.android.googleServicesFile) {\n    const contents = await fs.readFile(\n      path.resolve(projectRoot, manifest.android.googleServicesFile),\n      'utf8'\n    );\n    manifest.android.googleServicesFile = contents;\n  }\n}\n\nasync function _resolveManifestAssets(projectRoot, manifest, resolver, strict = false) {\n  try {\n    // Asset fields that the user has set\n    const assetSchemas = (await ExpSchema.getAssetSchemasAsync(\n      manifest.sdkVersion\n    )).filter(({ fieldPath }) => _.get(manifest, fieldPath));\n\n    // Get the URLs\n    const urls = await Promise.all(\n      assetSchemas.map(async ({ fieldPath }) => {\n        const pathOrURL = _.get(manifest, fieldPath);\n        if (pathOrURL.match(/^https?:\\/\\/(.*)$/)) {\n          // It's a remote URL\n          return pathOrURL;\n        } else if (fs.existsSync(path.resolve(projectRoot, pathOrURL))) {\n          return await resolver(pathOrURL);\n        } else {\n          const err = new Error('Could not resolve local asset.');\n          // $FlowFixMe\n          err.localAssetPath = pathOrURL;\n          // $FlowFixMe\n          err.manifestField = fieldPath;\n          throw err;\n        }\n      })\n    );\n\n    // Set the corresponding URL fields\n    assetSchemas.forEach(({ fieldPath }, index) => _.set(manifest, fieldPath + 'Url', urls[index]));\n  } catch (e) {\n    let logMethod = ProjectUtils.logWarning;\n    if (strict) {\n      logMethod = ProjectUtils.logError;\n    }\n    if (e.localAssetPath) {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Unable to resolve asset \"${e.localAssetPath}\" from \"${e.manifestField}\" in your app/exp.json.`\n      );\n    } else {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Warning: Unable to resolve manifest assets. Icons might not work. ${e.message}.`\n      );\n    }\n\n    if (strict) {\n      throw new Error('Resolving assets failed.');\n    }\n  }\n}\n\nfunction _requireFromProject(modulePath, projectRoot) {\n  try {\n    if (modulePath.indexOf('.') === 0) {\n      let fullPath = path.resolve(projectRoot, modulePath);\n\n      // Clear the require cache for this module so get a fresh version of it\n      // without requiring the user to restart XDE\n      decache(fullPath);\n\n      // $FlowIssue: doesn't work with dynamic requires\n      return require(fullPath);\n    } else {\n      let fullPath = path.resolve(projectRoot, 'node_modules', modulePath);\n\n      // Clear the require cache for this module so get a fresh version of it\n      // without requiring the user to restart XDE\n      decache(fullPath);\n\n      // $FlowIssue: doesn't work with dynamic requires\n      return require(fullPath);\n    }\n  } catch (e) {\n    return null;\n  }\n}\n\nexport async function getSlugAsync(projectRoot: string, options: Object = {}) {\n  // Verify that exp/app.json exist\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  if (!exp || !pkg) {\n    const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n    throw new XDLError(\n      ErrorCode.NO_PACKAGE_JSON,\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  if (!exp.slug && pkg.name) {\n    exp.slug = pkg.name;\n  } else if (!exp.slug) {\n    const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n    throw new XDLError(\n      ErrorCode.INVALID_MANIFEST,\n      `${configName} in ${projectRoot} must contain the slug field`\n    );\n  }\n  return exp.slug;\n}\n\nexport async function getLatestReleaseAsync(\n  projectRoot: string,\n  options: {\n    releaseChannel: string,\n    platform: string,\n  }\n) {\n  // TODO(ville): move request from multipart/form-data to JSON once supported by the endpoint.\n  let formData = new FormData();\n  formData.append('queryType', 'history');\n  formData.append('slug', await getSlugAsync(projectRoot));\n  formData.append('version', '2');\n  formData.append('count', '1');\n  formData.append('releaseChannel', options.releaseChannel);\n  formData.append('platform', options.platform);\n  const { queryResult } = await Api.callMethodAsync('publishInfo', [], 'post', null, {\n    formData,\n  });\n  if (queryResult && queryResult.length > 0) {\n    return queryResult[0];\n  } else {\n    return null;\n  }\n}\n\n/**\n * Apps exporting for self hosting will have the files created in the project directory the following way:\n.\n├── android-index.exp\n├── android.js\n├── assets\n│   ├── 004c2bbb035d8d06bb830efc4673c886\n│   └── 1eccbc4c41d49fd81840aef3eaabe862\n├── ios-index.exp\n└── ios.js\n */\nexport async function exportForAppHosting(\n  projectRoot: string,\n  publicUrl: string,\n  assetUrl: string,\n  outputDir: string,\n  options: {} = {}\n) {\n  await _validatePackagerReadyAsync(projectRoot);\n\n  // make output dir if not exists\n  const pathToWrite = path.resolve(projectRoot, path.join(outputDir, 'assets'));\n  await fs.ensureDir(pathToWrite);\n\n  // build the bundles\n  let packagerOpts = {};\n  if (options.isDev) {\n    packagerOpts = { dev: true, minify: false };\n  }\n  let { iosBundle, androidBundle } = await _buildPublishBundlesAsync(projectRoot, packagerOpts);\n  await _writeArtifactSafelyAsync(projectRoot, null, path.join(outputDir, 'ios.js'), iosBundle);\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'android.js'),\n    androidBundle\n  );\n  logger.global.info('Finished saving JS Bundles.');\n\n  // save the assets\n  // Get project config\n  const publishOptions = options.publishOptions || {};\n  const exp = await _getPublishExpConfigAsync(projectRoot, publishOptions);\n  const { assets } = await _fetchAndSaveAssetsAsync(projectRoot, exp, publicUrl, outputDir);\n\n  if (options.dumpAssetmap) {\n    logger.global.info('Dumping asset map.');\n    const assetmap = {};\n    assets.forEach(asset => {\n      assetmap[asset.hash] = asset;\n    });\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(outputDir, 'assetmap.json'),\n      JSON.stringify(assetmap)\n    );\n  }\n\n  // Delete keys that are normally deleted in the publish process\n  delete exp.hooks;\n\n  // Add assetUrl to manifest\n  exp.assetUrlOverride = assetUrl;\n\n  // TODO(quin): follow up and write a doc page that explains these fields that users don't specify in app.json\n  exp.publishedTime = new Date().toISOString();\n  exp.slug = 'selfhost';\n\n  if (options.isDev) {\n    exp.developer = {\n      tool: 'exp',\n    };\n  }\n\n  if (!exp.slug) {\n    throw new XDLError(\n      ErrorCode.INVALID_MANIFEST,\n      'Must provide a slug field in the app.json manifest.'\n    );\n  }\n  const user = await UserManager.ensureLoggedInAsync();\n  exp.id = `@${user.username}/${exp.slug}`;\n\n  // save the android manifest\n  exp.bundleUrl = urljoin(publicUrl, 'android.js');\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'android-index.exp'),\n    JSON.stringify(exp)\n  );\n\n  // save the ios manifest\n  exp.bundleUrl = urljoin(publicUrl, 'ios.js');\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'ios-index.exp'),\n    JSON.stringify(exp)\n  );\n\n  // build source maps\n  if (options.dumpSourcemap) {\n    const { iosSourceMap, androidSourceMap } = await _maybeBuildSourceMapsAsync(projectRoot, exp, {\n      force: true,\n    });\n    // write the sourcemap files\n    const iosMapPath = path.join(outputDir, 'ios.map');\n    const iosJsPath = path.join(outputDir, 'ios.js');\n    await _writeArtifactSafelyAsync(projectRoot, null, iosMapPath, iosSourceMap);\n\n    const androidMapPath = path.join(outputDir, 'android.map');\n    const androidJsPath = path.join(outputDir, 'android.js');\n    await _writeArtifactSafelyAsync(projectRoot, null, androidMapPath, androidSourceMap);\n\n    // Remove original mapping to incorrect sourcemap paths\n    logger.global.info('Configuring sourcemaps');\n    await truncateLastNLines(iosJsPath, 1);\n    await truncateLastNLines(androidJsPath, 1);\n\n    // Add correct mapping to sourcemap paths\n    await appendFile(iosJsPath, '\\n//# sourceMappingURL=ios.map');\n    await appendFile(androidJsPath, '\\n//# sourceMappingURL=android.map');\n\n    // Make a debug html so user can debug their bundles\n    logger.global.info('Preparing additional debugging files');\n    const debugHtml = `\n    <script src=\"ios.js\"></script>\n    <script src=\"android.js\"></script>\n    Open up this file in Chrome. In the Javascript developer console, navigate to the Source tab.\n    You can see a red coloured folder containing the original source code from your bundle. \n    `;\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(outputDir, 'debug.html'),\n      debugHtml\n    );\n  }\n}\n\n// truncate the last n lines in a file\nasync function truncateLastNLines(filePath: string, n: number) {\n  const lines = await readLastLines.read(filePath, n);\n  const to_vanquish = lines.length;\n  const { size } = await stat(filePath);\n  await truncate(filePath, size - to_vanquish);\n}\n\nasync function _saveAssetAsync(projectRoot, assets, outputDir) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths = {};\n  assets.forEach(asset => {\n    asset.files.forEach((path, index) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n\n  // save files one chunk at a time\n  const keyChunks = _.chunk(Object.keys(paths), 5);\n  for (const keys of keyChunks) {\n    const promises = [];\n    for (const key of keys) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `uploading ${paths[key]}`);\n\n      logger.global.info({ quiet: true }, `Saving ${paths[key]}`);\n\n      let assetPath = path.resolve(outputDir, 'assets', key);\n\n      // copy file over to assetPath\n      const p = fs.copy(paths[key], assetPath);\n      promises.push(p);\n    }\n    await Promise.all(promises);\n  }\n  logger.global.info('Files successfully saved.');\n}\n\nexport async function publishAsync(\n  projectRoot: string,\n  options: Object = {}\n): Promise<{ url: string, ids: string[], err: ?string }> {\n  const user = await UserManager.ensureLoggedInAsync();\n  await _validatePackagerReadyAsync(projectRoot);\n  Analytics.logEvent('Publish', {\n    projectRoot,\n    developerTool: Config.developerTool,\n  });\n\n  const validationStatus = await Doctor.validateWithNetworkAsync(projectRoot);\n  if (validationStatus == Doctor.ERROR || validationStatus === Doctor.FATAL) {\n    throw new XDLError(\n      ErrorCode.PUBLISH_VALIDATION_ERROR,\n      \"Couldn't publish because errors were found. (See logs above.) Please fix the errors and try again.\"\n    );\n  }\n\n  // Get project config\n  let exp = await _getPublishExpConfigAsync(projectRoot, options);\n\n  // TODO: refactor this out to a function, throw error if length doesn't match\n  let { hooks } = exp;\n  delete exp.hooks;\n  let validPostPublishHooks = [];\n  if (hooks && hooks.postPublish) {\n    hooks.postPublish.forEach(hook => {\n      let { file, config } = hook;\n      let fn = _requireFromProject(file, projectRoot);\n      if (fn === null) {\n        logger.global.error(`Unable to load postPublishHook: '${file}'`);\n      } else {\n        hook._fn = fn;\n        validPostPublishHooks.push(hook);\n      }\n    });\n\n    if (validPostPublishHooks.length !== hooks.postPublish.length) {\n      logger.global.error();\n\n      throw new XDLError(\n        ErrorCode.HOOK_INITIALIZATION_ERROR,\n        'Please fix your postPublish hook configuration.'\n      );\n    }\n  }\n\n  let { iosBundle, androidBundle } = await _buildPublishBundlesAsync(projectRoot);\n\n  await _fetchAndUploadAssetsAsync(projectRoot, exp);\n\n  let { iosSourceMap, androidSourceMap } = await _maybeBuildSourceMapsAsync(projectRoot, exp, {\n    force: validPostPublishHooks.length,\n  });\n\n  let response;\n  try {\n    response = await _uploadArtifactsAsync({\n      exp,\n      iosBundle,\n      androidBundle,\n      options,\n    });\n  } catch (e) {\n    if (e.serverError === 'SCHEMA_VALIDATION_ERROR') {\n      throw new Error(\n        `There was an error validating your project schema. Check for any warnings about the contents of your app/exp.json.`\n      );\n    }\n    Sentry.captureException(e);\n    throw e;\n  }\n\n  await _maybeWriteArtifactsToDiskAsync({\n    exp,\n    projectRoot,\n    iosBundle,\n    androidBundle,\n    iosSourceMap,\n    androidSourceMap,\n  });\n\n  if (\n    validPostPublishHooks.length ||\n    (exp.ios && exp.ios.publishManifestPath) ||\n    (exp.android && exp.android.publishManifestPath)\n  ) {\n    let [androidManifest, iosManifest] = await Promise.all([\n      ExponentTools.getManifestAsync(response.url, {\n        'Exponent-SDK-Version': exp.sdkVersion,\n        'Exponent-Platform': 'android',\n        'Expo-Release-Channel': options.releaseChannel,\n      }),\n      ExponentTools.getManifestAsync(response.url, {\n        'Exponent-SDK-Version': exp.sdkVersion,\n        'Exponent-Platform': 'ios',\n        'Expo-Release-Channel': options.releaseChannel,\n      }),\n    ]);\n\n    const hookOptions = {\n      url: response.url,\n      exp,\n      iosBundle,\n      iosSourceMap,\n      iosManifest,\n      androidBundle,\n      androidSourceMap,\n      androidManifest,\n      projectRoot,\n      log: msg => {\n        logger.global.info({ quiet: true }, msg);\n      },\n    };\n\n    for (let hook of validPostPublishHooks) {\n      logger.global.info(`Running postPublish hook: ${hook.file}`);\n      try {\n        let result = hook._fn({\n          config: hook.config,\n          ...hookOptions,\n        });\n\n        // If it's a promise, wait for it to resolve\n        if (result && result.then) {\n          result = await result;\n        }\n\n        if (result) {\n          logger.global.info({ quiet: true }, result);\n        }\n      } catch (e) {\n        logger.global.warn(`Warning: postPublish hook '${hook.file}' failed: ${e.stack}`);\n      }\n    }\n\n    if (exp.ios && exp.ios.publishManifestPath) {\n      await _writeArtifactSafelyAsync(\n        projectRoot,\n        'ios.publishManifestPath',\n        exp.ios.publishManifestPath,\n        JSON.stringify(iosManifest)\n      );\n    }\n\n    if (exp.android && exp.android.publishManifestPath) {\n      await _writeArtifactSafelyAsync(\n        projectRoot,\n        'android.publishManifestPath',\n        exp.android.publishManifestPath,\n        JSON.stringify(androidManifest)\n      );\n    }\n\n    // We need to add EmbeddedResponse instances on Android to tell the runtime\n    // that the shell app manifest and bundle is packaged.\n    if (exp.android && exp.android.publishManifestPath && exp.android.publishBundlePath) {\n      let fullManifestUrl = `${response.url.replace('exp://', 'https://')}/index.exp`;\n      let constantsPath = path.join(\n        projectRoot,\n        'android',\n        'app',\n        'src',\n        'main',\n        'java',\n        'host',\n        'exp',\n        'exponent',\n        'generated',\n        'AppConstants.java'\n      );\n      await ExponentTools.deleteLinesInFileAsync(\n        `START EMBEDDED RESPONSES`,\n        `END EMBEDDED RESPONSES`,\n        constantsPath\n      );\n      await ExponentTools.regexFileAsync(\n        '// ADD EMBEDDED RESPONSES HERE',\n        `\n        // ADD EMBEDDED RESPONSES HERE\n        // START EMBEDDED RESPONSES\n        embeddedResponses.add(new Constants.EmbeddedResponse(\"${fullManifestUrl}\", \"assets://shell-app-manifest.json\", \"application/json\"));\n        embeddedResponses.add(new Constants.EmbeddedResponse(\"${androidManifest.bundleUrl}\", \"assets://shell-app.bundle\", \"application/javascript\"));\n        // END EMBEDDED RESPONSES`,\n        constantsPath\n      );\n    }\n  }\n\n  // TODO: move to postPublish hook\n  if (exp.isKernel) {\n    await _handleKernelPublishedAsync({\n      user,\n      exp,\n      projectRoot,\n      url: response.url,\n    });\n  }\n\n  return {\n    ...response,\n    url:\n      options.releaseChannel && options.releaseChannel !== 'default'\n        ? `${response.url}?release-channel=${options.releaseChannel}`\n        : response.url,\n  };\n}\n\nasync function _uploadArtifactsAsync({ exp, iosBundle, androidBundle, options }) {\n  logger.global.info('Uploading JavaScript bundles');\n  let formData = new FormData();\n\n  formData.append('expJson', JSON.stringify(exp));\n  formData.append('iosBundle', _createBlob(iosBundle), 'iosBundle');\n  formData.append('androidBundle', _createBlob(androidBundle), 'androidBundle');\n  formData.append('options', JSON.stringify(options));\n  let response = await Api.callMethodAsync('publish', null, 'put', null, {\n    formData,\n  });\n  return response;\n}\n\nasync function _validatePackagerReadyAsync(projectRoot) {\n  _assertValidProjectRoot(projectRoot);\n\n  // Ensure the packager is started\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      'Metro Bundler is not running. Trying to restart it...'\n    );\n    await startReactNativeServerAsync(projectRoot, { reset: true });\n  }\n}\n\nasync function _getPublishExpConfigAsync(projectRoot, options) {\n  let schema = joi.object().keys({\n    releaseChannel: joi.string(),\n  });\n\n  // Validate schema\n  try {\n    await joiValidateAsync(options, schema);\n    options.releaseChannel = options.releaseChannel || 'default'; // joi default not enforcing this :/\n  } catch (e) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, e.toString());\n  }\n\n  // Verify that exp/app.json and package.json exist\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  if (!exp || !pkg) {\n    const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n    throw new XDLError(\n      ErrorCode.NO_PACKAGE_JSON,\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  // Support version and name being specified in package.json for legacy\n  // support pre: exp.json\n  if (!exp.version && pkg.version) {\n    exp.version = pkg.version;\n  }\n\n  if (!exp.slug && pkg.name) {\n    exp.slug = pkg.name;\n  }\n\n  if (exp.android && exp.android.config) {\n    delete exp.android.config;\n  }\n\n  if (exp.ios && exp.ios.config) {\n    delete exp.ios.config;\n  }\n\n  // Only allow projects to be published with UNVERSIONED if a correct token is set in env\n  if (exp.sdkVersion === 'UNVERSIONED' && !process.env['EXPO_SKIP_MANIFEST_VALIDATION_TOKEN']) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, 'Cannot publish with sdkVersion UNVERSIONED.');\n  }\n  exp.locales = await ExponentTools.getResolvedLocalesAsync(exp);\n  return exp;\n}\n\n// Fetch iOS and Android bundles for publishing\nasync function _buildPublishBundlesAsync(projectRoot, opts?: Object) {\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let publishUrl = await UrlUtils.constructPublishUrlAsync(projectRoot, entryPoint, null, opts);\n\n  logger.global.info('Building iOS bundle');\n  let iosBundle = await _getForPlatformAsync(projectRoot, publishUrl, 'ios', {\n    errorCode: ErrorCode.INVALID_BUNDLE,\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  logger.global.info('Building Android bundle');\n  let androidBundle = await _getForPlatformAsync(projectRoot, publishUrl, 'android', {\n    errorCode: ErrorCode.INVALID_BUNDLE,\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  return { iosBundle, androidBundle };\n}\n\n// note(brentvatne): currently we build source map anytime there is a\n// postPublish hook -- we may have an option in the future to manually\n// enable sourcemap building, but for now it's very fast, most apps in\n// production should use sourcemaps for error reporting, and in the worst\n// case, adding a few seconds to a postPublish hook isn't too annoying\nasync function _maybeBuildSourceMapsAsync(projectRoot, exp, options = {}) {\n  if (!options.force) {\n    return { iosSourceMap: null, androidSourceMap: null };\n  }\n\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let sourceMapUrl = await UrlUtils.constructSourceMapUrlAsync(projectRoot, entryPoint);\n\n  logger.global.info('Building sourcemaps');\n  let iosSourceMap = await _getForPlatformAsync(projectRoot, sourceMapUrl, 'ios', {\n    errorCode: ErrorCode.INVALID_BUNDLE,\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  let androidSourceMap = await _getForPlatformAsync(projectRoot, sourceMapUrl, 'android', {\n    errorCode: ErrorCode.INVALID_BUNDLE,\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  return { iosSourceMap, androidSourceMap };\n}\n\n/**\n * Collects all the assets declared in the android app, ios app and manifest\n *\n * @param {string} hostedAssetPrefix\n *    The path where assets are hosted (ie) http://xxx.cloudfront.com/assets/\n * \n * @modifies {exp} Replaces relative asset paths in the manifest with hosted URLS\n * \n */\nasync function _collectAssets(projectRoot, exp, hostedAssetPrefix) {\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let assetsUrl = await UrlUtils.constructAssetsUrlAsync(projectRoot, entryPoint);\n\n  let iosAssetsJson = await _getForPlatformAsync(projectRoot, assetsUrl, 'ios', {\n    errorCode: ErrorCode.INVALID_ASSETS,\n  });\n\n  let androidAssetsJson = await _getForPlatformAsync(projectRoot, assetsUrl, 'android', {\n    errorCode: ErrorCode.INVALID_ASSETS,\n  });\n\n  // Resolve manifest assets to their hosted URL and add them to the list of assets to\n  // be uploaded. Modifies exp.\n  const manifestAssets = [];\n  await _resolveManifestAssets(\n    projectRoot,\n    exp,\n    async assetPath => {\n      const absolutePath = path.resolve(projectRoot, assetPath);\n      const contents = await fs.readFile(absolutePath);\n      const hash = md5hex(contents);\n      manifestAssets.push({ files: [absolutePath], fileHashes: [hash], hash });\n      return urljoin(hostedAssetPrefix, hash);\n    },\n    true\n  );\n\n  // Upload asset files\n  const iosAssets = JSON.parse(iosAssetsJson);\n  const androidAssets = JSON.parse(androidAssetsJson);\n  return iosAssets.concat(androidAssets).concat(manifestAssets);\n}\n\n/**\n * Configures exp, preparing it for asset export\n * \n * @modifies {exp}\n * \n */\nasync function _configureExpForAssets(projectRoot, exp, assets) {\n  // Add google services file if it exists\n  await _resolveGoogleServicesFile(projectRoot, exp);\n\n  // Convert asset patterns to a list of asset strings that match them.\n  // Assets strings are formatted as `asset_<hash>.<type>` and represent\n  // the name that the file will have in the app bundle. The `asset_` prefix is\n  // needed because android doesn't support assets that start with numbers.\n  if (exp.assetBundlePatterns) {\n    const fullPatterns = exp.assetBundlePatterns.map(p => path.join(projectRoot, p));\n    logger.global.info('Processing asset bundle patterns:');\n    fullPatterns.forEach(p => logger.global.info('- ' + p));\n    // The assets returned by the RN packager has duplicates so make sure we\n    // only bundle each once.\n    const bundledAssets = new Set();\n    for (const asset of assets) {\n      const file = asset.files && asset.files[0];\n      const shouldBundle =\n        asset.__packager_asset && file && fullPatterns.some(p => minimatch(file, p));\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `${shouldBundle ? 'Include' : 'Exclude'} asset ${file}`\n      );\n      if (shouldBundle) {\n        asset.fileHashes.forEach(hash =>\n          bundledAssets.add('asset_' + hash + (asset.type ? '.' + asset.type : ''))\n        );\n      }\n    }\n    exp.bundledAssets = [...bundledAssets];\n    delete exp.assetBundlePatterns;\n  }\n\n  return exp;\n}\n\nasync function _fetchAndUploadAssetsAsync(projectRoot, exp) {\n  logger.global.info('Analyzing assets');\n\n  const assetCdnPath = urljoin(EXPO_CDN, '~assets');\n  const assets = await _collectAssets(projectRoot, exp, assetCdnPath);\n\n  logger.global.info('Uploading assets');\n\n  if (assets.length > 0 && assets[0].fileHashes) {\n    await uploadAssetsAsync(projectRoot, assets);\n  } else {\n    logger.global.info({ quiet: true }, 'No assets to upload, skipped.');\n  }\n\n  // Updates the manifest to reflect additional asset bundling + configs\n  await _configureExpForAssets(projectRoot, exp, assets);\n\n  return exp;\n}\n\nasync function _fetchAndSaveAssetsAsync(projectRoot, exp, hostedUrl, outputDir) {\n  logger.global.info('Analyzing assets');\n\n  const assetCdnPath = urljoin(hostedUrl, 'assets');\n  const assets = await _collectAssets(projectRoot, exp, assetCdnPath);\n\n  logger.global.info('Saving assets');\n\n  if (assets.length > 0 && assets[0].fileHashes) {\n    await _saveAssetAsync(projectRoot, assets, outputDir);\n  } else {\n    logger.global.info({ quiet: true }, 'No assets to upload, skipped.');\n  }\n\n  // Updates the manifest to reflect additional asset bundling + configs\n  await _configureExpForAssets(projectRoot, exp, assets);\n\n  return { exp, assets };\n}\n\nasync function _writeArtifactSafelyAsync(projectRoot, keyName, artifactPath, artifact) {\n  const pathToWrite = path.resolve(projectRoot, artifactPath);\n  if (!fs.existsSync(path.dirname(pathToWrite))) {\n    const errorMsg = keyName\n      ? `app.json specifies: ${pathToWrite}, but that directory does not exist.`\n      : `app.json specifies ${keyName}: ${pathToWrite}, but that directory does not exist.`;\n    logger.global.warn(errorMsg);\n  } else {\n    await fs.writeFile(pathToWrite, artifact);\n  }\n}\n\nasync function _maybeWriteArtifactsToDiskAsync({\n  exp,\n  projectRoot,\n  iosBundle,\n  androidBundle,\n  iosSourceMap,\n  androidSourceMap,\n}) {\n  if (exp.android && exp.android.publishBundlePath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishBundlePath',\n      exp.android.publishBundlePath,\n      androidBundle\n    );\n  }\n\n  if (exp.ios && exp.ios.publishBundlePath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'ios.publishBundlePath',\n      exp.ios.publishBundlePath,\n      iosBundle\n    );\n  }\n\n  if (exp.android && exp.android.publishSourceMapPath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishSourceMapPath',\n      exp.android.publishSourceMapPath,\n      androidSourceMap\n    );\n  }\n\n  if (exp.ios && exp.ios.publishSourceMapPath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'ios.publishSourceMapPath',\n      exp.ios.publishSourceMapPath,\n      iosSourceMap\n    );\n  }\n}\n\nasync function _handleKernelPublishedAsync({ projectRoot, user, exp, url }) {\n  let kernelBundleUrl = `${Config.api.scheme}://${Config.api.host}`;\n  if (Config.api.port) {\n    kernelBundleUrl = `${kernelBundleUrl}:${Config.api.port}`;\n  }\n  kernelBundleUrl = `${kernelBundleUrl}/@${user.username}/${exp.slug}/bundle`;\n\n  if (exp.kernel.androidManifestPath) {\n    let manifest = await ExponentTools.getManifestAsync(url, {\n      'Exponent-SDK-Version': exp.sdkVersion,\n      'Exponent-Platform': 'android',\n    });\n    manifest.bundleUrl = kernelBundleUrl;\n    manifest.sdkVersion = 'UNVERSIONED';\n    await fs.writeFile(\n      path.resolve(projectRoot, exp.kernel.androidManifestPath),\n      JSON.stringify(manifest)\n    );\n  }\n\n  if (exp.kernel.iosManifestPath) {\n    let manifest = await ExponentTools.getManifestAsync(url, {\n      'Exponent-SDK-Version': exp.sdkVersion,\n      'Exponent-Platform': 'ios',\n    });\n    manifest.bundleUrl = kernelBundleUrl;\n    manifest.sdkVersion = 'UNVERSIONED';\n    await fs.writeFile(\n      path.resolve(projectRoot, exp.kernel.iosManifestPath),\n      JSON.stringify(manifest)\n    );\n  }\n}\n\n// TODO(jesse): Add analytics for upload\nasync function uploadAssetsAsync(projectRoot, assets) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths = {};\n  assets.forEach(asset => {\n    asset.files.forEach((path, index) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n\n  // Collect list of assets missing on host\n  const metas = (await Api.callMethodAsync('assetsMetadata', [], 'post', {\n    keys: Object.keys(paths),\n  })).metadata;\n  const missing = Object.keys(paths).filter(key => !metas[key].exists);\n\n  if (missing.length === 0) {\n    logger.global.info({ quiet: true }, `No assets changed, skipped.`);\n  }\n\n  // Upload them!\n  await Promise.all(\n    _.chunk(missing, 5).map(async keys => {\n      let formData = new FormData();\n      for (const key of keys) {\n        ProjectUtils.logDebug(projectRoot, 'expo', `uploading ${paths[key]}`);\n\n        let relativePath = paths[key].replace(projectRoot, '');\n        logger.global.info({ quiet: true }, `Uploading ${relativePath}`);\n\n        formData.append(key, await _readFileForUpload(paths[key]), paths[key]);\n      }\n      await Api.callMethodAsync('uploadAssets', [], 'put', null, { formData });\n    })\n  );\n}\n\nfunction _createBlob(string) {\n  if (isNode()) {\n    return string;\n  } else {\n    return new Blob([string]);\n  }\n}\n\nasync function _readFileForUpload(path) {\n  if (isNode()) {\n    return fs.createReadStream(path);\n  } else {\n    const data = await fs.readFile(path);\n    return new Blob([data]);\n  }\n}\n\nexport async function buildAsync(\n  projectRoot: string,\n  options: {\n    current?: boolean,\n    mode?: string,\n    platform?: string,\n    expIds?: Array<string>,\n    type?: string,\n    releaseChannel?: string,\n    bundleIdentifier?: string,\n  } = {}\n) {\n  await UserManager.ensureLoggedInAsync();\n  _assertValidProjectRoot(projectRoot);\n\n  Analytics.logEvent('Build Shell App', {\n    projectRoot,\n    developerTool: Config.developerTool,\n    platform: options.platform,\n  });\n\n  let schema = joi.object().keys({\n    current: joi.boolean(),\n    mode: joi.string(),\n    platform: joi.any().valid('ios', 'android', 'all'),\n    expIds: joi.array(),\n    type: joi.any().valid('archive', 'simulator', 'client'),\n    releaseChannel: joi.string().regex(/[a-z\\d][a-z\\d._-]*/),\n    bundleIdentifier: joi.string().regex(/^[a-zA-Z][a-zA-Z0-9\\-\\.]+$/),\n  });\n\n  try {\n    await joiValidateAsync(options, schema);\n  } catch (e) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, e.toString());\n  }\n\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n  const configPrefix = configName === 'app.json' ? 'expo.' : '';\n\n  if (!exp || !pkg) {\n    throw new XDLError(\n      ErrorCode.NO_PACKAGE_JSON,\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  // Support version and name being specified in package.json for legacy\n  // support pre: exp.json\n  if (!exp.version && pkg.version) {\n    exp.version = pkg.version;\n  }\n  if (!exp.slug && pkg.name) {\n    exp.slug = pkg.name;\n  }\n\n  if (options.platform === 'ios' || options.platform === 'all') {\n    if (!exp.ios || !exp.ios.bundleIdentifier) {\n      throw new XDLError(\n        ErrorCode.INVALID_MANIFEST,\n        `Must specify a bundle identifier in order to build this experience for iOS. Please specify one in ${configName} at \"${configPrefix}ios.bundleIdentifier\"`\n      );\n    }\n  }\n\n  if (options.platform === 'android' || options.platform === 'all') {\n    if (!exp.android || !exp.android.package) {\n      throw new XDLError(\n        ErrorCode.INVALID_MANIFEST,\n        `Must specify a java package in order to build this experience for Android. Please specify one in ${configName} at \"${configPrefix}android.package\"`\n      );\n    }\n  }\n\n  if (process.env.FORCE_TURTLE_VERSION) {\n    options.forceTurtleVersion = process.env.FORCE_TURTLE_VERSION;\n  }\n\n  let response = await Api.callMethodAsync('build', [], 'put', {\n    manifest: exp,\n    options,\n  });\n\n  return response;\n}\n\nasync function _waitForRunningAsync(url) {\n  try {\n    let response = await request(url);\n    // Looking for \"Cached Bundles\" string is hacky, but unfortunately\n    // ngrok returns a 200 when it succeeds but the port it's proxying\n    // isn't bound.\n    if (\n      response.statusCode >= 200 &&\n      response.statusCode < 300 &&\n      response.body &&\n      response.body.includes('packager-status:running')\n    ) {\n      return true;\n    }\n  } catch (e) {\n    // Try again after delay\n  }\n\n  await delayAsync(100);\n  return _waitForRunningAsync(url);\n}\n\nfunction _stripPackagerOutputBox(output: string) {\n  let re = /Running packager on port (\\d+)/;\n  let found = output.match(re);\n  if (found && found.length >= 2) {\n    return `Running packager on port ${found[1]}\\n`;\n  } else {\n    return null;\n  }\n}\n\nfunction _logPackagerOutput(projectRoot: string, level: string, data: Object) {\n  let output = data.toString();\n  if (!output) {\n    return;\n  }\n  // Temporarily hide warnings about duplicate providesModule declarations\n  // under react-native\n  if (_isIgnorableDuplicateModuleWarning(projectRoot, level, output)) {\n    ProjectUtils.logDebug(\n      projectRoot,\n      'expo',\n      `Suppressing @providesModule warning: ${output}`,\n      'project-suppress-providesmodule-warning'\n    );\n    return;\n  }\n  if (/^Scanning folders for symlinks in /.test(output)) {\n    ProjectUtils.logDebug(projectRoot, 'metro', output);\n    return;\n  }\n  if (level === 'info') {\n    ProjectUtils.logInfo(projectRoot, 'metro', output);\n  } else {\n    ProjectUtils.logError(projectRoot, 'metro', output);\n  }\n}\n\nfunction _isIgnorableDuplicateModuleWarning(\n  projectRoot: string,\n  level: string,\n  output: string\n): boolean {\n  if (\n    level !== 'error' ||\n    !output.startsWith('jest-haste-map: @providesModule naming collision:')\n  ) {\n    return false;\n  }\n\n  let reactNativeNodeModulesPath = path.join(\n    projectRoot,\n    'node_modules',\n    'react-native',\n    'node_modules'\n  );\n  let reactNativeNodeModulesPattern = _.escapeRegExp(reactNativeNodeModulesPath);\n  let reactNativeNodeModulesCollisionRegex = new RegExp(\n    `Paths: ${reactNativeNodeModulesPattern}.+ collides with ${reactNativeNodeModulesPattern}.+`\n  );\n  return reactNativeNodeModulesCollisionRegex.test(output);\n}\n\nfunction _isIgnorableBugReportingExtraData(body) {\n  return body.length === 2 && body[0] === 'BugReporting extraData:';\n}\n\nfunction _handleDeviceLogs(projectRoot: string, deviceId: string, deviceName: string, logs: any) {\n  for (let i = 0; i < logs.length; i++) {\n    let log = logs[i];\n    let body = typeof log.body === 'string' ? [log.body] : log.body;\n    let string = body\n      .map(obj => {\n        if (typeof obj === 'undefined') {\n          return 'undefined';\n        }\n        if (obj === 'null') {\n          return 'null';\n        }\n        if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {\n          return obj;\n        }\n        try {\n          return JSON.stringify(obj);\n        } catch (e) {\n          return obj.toString();\n        }\n      })\n      .join(' ');\n    let level = log.level;\n    if (_isIgnorableBugReportingExtraData(body)) {\n      level = logger.DEBUG;\n    }\n    let groupDepth = log.groupDepth;\n    let shouldHide = log.shouldHide;\n    let includesStack = log.includesStack;\n    ProjectUtils.logWithLevel(\n      projectRoot,\n      level,\n      {\n        tag: 'device',\n        deviceId,\n        deviceName,\n        groupDepth,\n        shouldHide,\n        includesStack,\n      },\n      string\n    );\n  }\n}\nexport async function startReactNativeServerAsync(\n  projectRoot: string,\n  options: Object = {},\n  verbose: boolean = true\n) {\n  _assertValidProjectRoot(projectRoot);\n  await stopReactNativeServerAsync(projectRoot);\n  await Watchman.addToPathAsync(); // Attempt to fix watchman if it's hanging\n  await Watchman.unblockAndGetVersionAsync(projectRoot);\n\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  let packagerPort = await _getFreePortAsync(19001); // Create packager options\n  let nodeModulesPath = exp.nodeModulesPath\n    ? path.join(path.resolve(projectRoot, exp.nodeModulesPath), 'node_modules')\n    : path.join(projectRoot, 'node_modules');\n  let packagerOpts = {\n    port: packagerPort,\n    customLogReporterPath: path.join(nodeModulesPath, 'expo', 'tools', 'LogReporter'),\n    assetExts: ['ttf'],\n    nonPersistent: !!options.nonPersistent,\n  };\n\n  if (options.maxWorkers) {\n    packagerOpts['max-workers'] = options.maxWorkers;\n  }\n\n  if (!Versions.gteSdkVersion(exp, '16.0.0')) {\n    delete packagerOpts.customLogReporterPath;\n  }\n  const userPackagerOpts = _.get(exp, 'packagerOpts');\n  if (userPackagerOpts) {\n    // The RN CLI expects rn-cli.config.js's path to be absolute. We use the\n    // project root to resolve relative paths since that was the original\n    // behavior of the RN CLI.\n    if (userPackagerOpts.config) {\n      userPackagerOpts.config = path.resolve(projectRoot, userPackagerOpts.config);\n    }\n\n    packagerOpts = {\n      ...packagerOpts,\n      ...userPackagerOpts,\n      ...(userPackagerOpts.assetExts\n        ? {\n            assetExts: _.uniq([...packagerOpts.assetExts, ...userPackagerOpts.assetExts]),\n          }\n        : {}),\n    };\n\n    if (userPackagerOpts.port !== undefined && userPackagerOpts.port !== null) {\n      packagerPort = userPackagerOpts.port;\n    }\n  }\n  let cliOpts = _.reduce(\n    packagerOpts,\n    (opts, val, key) => {\n      // If the packager opt value is boolean, don't set\n      // --[opt] [value], just set '--opt'\n      if (val && typeof val === 'boolean') {\n        opts.push(`--${key}`);\n      } else if (val) {\n        opts.push(`--${key}`, val);\n      }\n      return opts;\n    },\n    ['start']\n  );\n  if (options.reset) {\n    cliOpts.push('--reset-cache');\n  } // Get custom CLI path from project package.json, but fall back to node_module path\n  let defaultCliPath = path.join(\n    projectRoot,\n    'node_modules',\n    'react-native',\n    'local-cli',\n    'cli.js'\n  );\n  const cliPath = _.get(exp, 'rnCliPath', defaultCliPath);\n  let nodePath; // When using a custom path for the RN CLI, we want it to use the project // root to look up config files and Node modules\n  if (exp.rnCliPath) {\n    nodePath = _nodePathForProjectRoot(projectRoot);\n  } else {\n    nodePath = null;\n  }\n  // Run the copy of Node that's embedded in Electron by setting the // ELECTRON_RUN_AS_NODE environment variable // Note: the CLI script sets up graceful-fs and sets ulimit to 4096 in the // child process\n  let packagerProcess = child_process.fork(cliPath, cliOpts, {\n    cwd: projectRoot,\n    env: {\n      ...process.env,\n      REACT_NATIVE_APP_ROOT: projectRoot,\n      NODE_PATH: nodePath,\n      ELECTRON_RUN_AS_NODE: 1,\n    },\n    silent: true,\n  });\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort,\n    packagerPid: packagerProcess.pid,\n  }); // TODO: do we need this? don't know if it's ever called\n  process.on('exit', () => {\n    treekill(packagerProcess.pid);\n  });\n  packagerProcess.stdout.setEncoding('utf8');\n  packagerProcess.stderr.setEncoding('utf8');\n  packagerProcess.stdout.pipe(split()).on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'info', data);\n    }\n  });\n  packagerProcess.stderr.on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'error', data);\n    }\n  });\n  let exitPromise = new Promise((resolve, reject) => {\n    packagerProcess.once('exit', async code => {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Metro Bundler process exited with code ${code}`);\n      reject(new Error(`Metro Bundler process exited with code ${code}`));\n      try {\n        await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n          packagerPort: null,\n          packagerPid: null,\n        });\n      } catch (e) {}\n    });\n  });\n  let packagerUrl = await UrlUtils.constructBundleUrlAsync(projectRoot, {\n    urlType: 'http',\n    hostType: 'localhost',\n  });\n  const statusUrl = `${packagerUrl}/status`;\n  const timeoutPromise = new Promise((resolve, reject) =>\n    setTimeout(\n      () =>\n        reject(\n          new Error(\n            `Could not access packager status at ${statusUrl}. Are you sure the packager is running and reachable?`\n          )\n        ),\n      WAIT_FOR_PACKAGER_TIMEOUT\n    )\n  );\n  await Promise.race([_waitForRunningAsync(statusUrl), exitPromise, timeoutPromise]);\n} // Simulate the node_modules resolution // If you project dir is /Jesse/Expo/Universe/BubbleBounce, returns // \"/Jesse/node_modules:/Jesse/Expo/node_modules:/Jesse/Expo/Universe/node_modules:/Jesse/Expo/Universe/BubbleBounce/node_modules\"\nfunction _nodePathForProjectRoot(projectRoot: string): string {\n  let paths = [];\n  let directory = path.resolve(projectRoot);\n  while (true) {\n    paths.push(path.join(directory, 'node_modules'));\n    let parentDirectory = path.dirname(directory);\n    if (directory === parentDirectory) {\n      break;\n    }\n    directory = parentDirectory;\n  }\n  return paths.join(path.delimiter);\n}\nexport async function stopReactNativeServerAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort || !packagerInfo.packagerPid) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `No packager found for project at ${projectRoot}.`);\n    return;\n  }\n  ProjectUtils.logDebug(\n    projectRoot,\n    'expo',\n    `Killing packager process tree: ${packagerInfo.packagerPid}`\n  );\n  try {\n    await treekillAsync(packagerInfo.packagerPid, 'SIGKILL');\n  } catch (e) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping packager process: ${e.toString()}`);\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort: null,\n    packagerPid: null,\n  });\n}\n\nlet blacklistedEnvironmentVariables = new Set([\n  'EXPO_ANDROID_KEY_PASSWORD',\n  'EXPO_ANDROID_KEYSTORE_PASSWORD',\n  'EXPO_IOS_DIST_P12_PASSWORD',\n  'EXPO_IOS_PUSH_P12_PASSWORD',\n]);\n\nfunction shouldExposeEnvironmentVariableInManifest(key) {\n  if (blacklistedEnvironmentVariables.has(key.toUpperCase())) {\n    return false;\n  }\n  return key.startsWith('REACT_NATIVE_') || key.startsWith('EXPO_');\n}\n\nexport async function startExpoServerAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n  await stopExpoServerAsync(projectRoot);\n  let app = express();\n  app.use(\n    bodyParser.json({\n      limit: '10mb',\n    })\n  );\n  app.use(\n    bodyParser.urlencoded({\n      limit: '10mb',\n      extended: true,\n    })\n  );\n  if ((await Doctor.validateWithNetworkAsync(projectRoot)) === Doctor.FATAL) {\n    throw new Error(`Couldn't start project. Please fix the errors and restart the project.`);\n  } // Serve the manifest.\n  let manifestHandler = async (req, res) => {\n    try {\n      // We intentionally don't `await`. We want to continue trying even\n      // if there is a potential error in the package.json and don't want to slow\n      // down the request\n      Doctor.validateWithNetworkAsync(projectRoot);\n      let { exp: manifest } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n      if (!manifest) {\n        const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n        throw new Error(`No ${configName} file found`);\n      } // Get packager opts and then copy into bundleUrlPackagerOpts\n      let packagerOpts = await ProjectSettings.getPackagerOptsAsync(projectRoot);\n      let bundleUrlPackagerOpts = JSON.parse(JSON.stringify(packagerOpts));\n      bundleUrlPackagerOpts.urlType = 'http';\n      if (bundleUrlPackagerOpts.hostType === 'redirect') {\n        bundleUrlPackagerOpts.hostType = 'tunnel';\n      }\n      manifest.xde = true; // deprecated\n      manifest.developer = {\n        tool: Config.developerTool,\n        projectRoot,\n      };\n      manifest.packagerOpts = packagerOpts;\n      manifest.env = {};\n      for (let key of Object.keys(process.env)) {\n        if (shouldExposeEnvironmentVariableInManifest(key)) {\n          manifest.env[key] = process.env[key];\n        }\n      }\n      let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n      let platform = req.headers['exponent-platform'] || 'ios';\n      entryPoint = UrlUtils.getPlatformSpecificBundleUrl(entryPoint, platform);\n      let mainModuleName = UrlUtils.guessMainModulePath(entryPoint);\n      let queryParams = await UrlUtils.constructBundleQueryParamsAsync(\n        projectRoot,\n        packagerOpts,\n        req.hostname\n      );\n      let path = `/${encodeURI(mainModuleName)}.bundle?platform=${encodeURIComponent(\n        platform\n      )}&${queryParams}`;\n      manifest.bundleUrl =\n        (await UrlUtils.constructBundleUrlAsync(projectRoot, bundleUrlPackagerOpts, req.hostname)) +\n        path;\n      manifest.debuggerHost = await UrlUtils.constructDebuggerHostAsync(projectRoot, req.hostname);\n      manifest.mainModuleName = mainModuleName;\n      manifest.logUrl = await UrlUtils.constructLogUrlAsync(projectRoot, req.hostname);\n      manifest.hostUri = await UrlUtils.constructHostUriAsync(projectRoot, req.hostname);\n      await _resolveManifestAssets(\n        projectRoot,\n        manifest,\n        async path => manifest.bundleUrl.match(/^https?:\\/\\/.*?\\//)[0] + 'assets/' + path\n      ); // the server normally inserts this but if we're offline we'll do it here\n      await _resolveGoogleServicesFile(projectRoot, manifest);\n      const hostUUID = await UserSettings.anonymousIdentifier();\n      let currentSession = await UserManager.getSessionAsync();\n      if (!currentSession) {\n        manifest.id = `@anonymous/${manifest.slug}-${hostUUID}`;\n      }\n      let manifestString = JSON.stringify(manifest);\n      if (req.headers['exponent-accept-signature']) {\n        if (_cachedSignedManifest.manifestString === manifestString) {\n          manifestString = _cachedSignedManifest.signedManifest;\n        } else {\n          if (!currentSession) {\n            const unsignedManifest = {\n              manifestString,\n              signature: 'UNSIGNED',\n            };\n            _cachedSignedManifest.manifestString = manifestString;\n            manifestString = JSON.stringify(unsignedManifest);\n            _cachedSignedManifest.signedManifest = manifestString;\n          } else {\n            let publishInfo = await Exp.getPublishInfoAsync(projectRoot);\n            let signedManifest = await Api.callMethodAsync(\n              'signManifest',\n              [publishInfo.args],\n              'post',\n              manifest\n            );\n            _cachedSignedManifest.manifestString = manifestString;\n            _cachedSignedManifest.signedManifest = signedManifest.response;\n            manifestString = signedManifest.response;\n          }\n        }\n      }\n      const hostInfo = {\n        host: hostUUID,\n        server: 'xdl',\n        serverVersion: require('../package.json').version,\n        serverDriver: Config.developerTool,\n        serverOS: os.platform(),\n        serverOSVersion: os.release(),\n      };\n      res.append('Exponent-Server', JSON.stringify(hostInfo));\n      res.send(manifestString);\n      Analytics.logEvent('Serve Manifest', {\n        projectRoot,\n        developerTool: Config.developerTool,\n      });\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error in manifestHandler: ${e} ${e.stack}`); // 5xx = Server Error HTTP code\n      res.status(520).send({\n        error: e.toString(),\n      });\n    }\n  };\n  app.get('/', manifestHandler);\n  app.get('/manifest', manifestHandler);\n  app.get('/index.exp', manifestHandler);\n  app.post('/logs', async (req, res) => {\n    try {\n      let deviceId = req.get('Device-Id');\n      let deviceName = req.get('Device-Name');\n      if (deviceId && deviceName && req.body) {\n        _handleDeviceLogs(projectRoot, deviceId, deviceName, req.body);\n      }\n    } catch (e) {\n      ProjectUtils.logError(projectRoot, 'expo', `Error getting device logs: ${e} ${e.stack}`);\n    }\n    res.send('Success');\n  });\n  app.post('/shutdown', async (req, res) => {\n    server.close();\n    res.send('Success');\n  });\n  let expRc = await ProjectUtils.readExpRcAsync(projectRoot);\n  let expoServerPort = expRc.manifestPort ? expRc.manifestPort : await _getFreePortAsync(19000);\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort,\n  });\n  let server = app.listen(expoServerPort, () => {\n    let host = server.address().address;\n    let port = server.address().port;\n    ProjectUtils.logDebug(projectRoot, 'expo', `Local server listening at http://${host}:${port}`);\n  });\n  await Exp.saveRecentExpRootAsync(projectRoot);\n}\nexport async function stopExpoServerAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (packagerInfo && packagerInfo.expoServerPort) {\n    try {\n      await request.post(`http://localhost:${packagerInfo.expoServerPort}/shutdown`);\n    } catch (e) {}\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort: null,\n  });\n}\nasync function _connectToNgrokAsync(\n  projectRoot: string,\n  args: mixed,\n  hostnameAsync: Function,\n  ngrokPid: ?number,\n  attempts: number = 0\n) {\n  try {\n    let configPath = path.join(UserSettings.dotExpoHomeDirectory(), 'ngrok.yml');\n    let hostname = await hostnameAsync();\n    let url = await ngrokConnectAsync({\n      hostname,\n      configPath,\n      ...args,\n    });\n    return url;\n  } catch (e) {\n    // Attempt to connect 3 times\n    if (attempts >= 2) {\n      if (e.message) {\n        throw new XDLError(ErrorCode.NGROK_ERROR, e.toString());\n      } else {\n        throw new XDLError(ErrorCode.NGROK_ERROR, JSON.stringify(e));\n      }\n    }\n    if (!attempts) {\n      attempts = 0;\n    } // Attempt to fix the issue\n    if (e.error_code && e.error_code === 103) {\n      if (attempts === 0) {\n        // Failed to start tunnel. Might be because url already bound to another session.\n        if (ngrokPid) {\n          try {\n            process.kill(ngrokPid, 'SIGKILL');\n          } catch (e) {\n            ProjectUtils.logDebug(projectRoot, 'expo', `Couldn't kill ngrok with PID ${ngrokPid}`);\n          }\n        } else {\n          await ngrokKillAsync();\n        }\n      } else {\n        // Change randomness to avoid conflict if killing ngrok didn't help\n        await Exp.resetProjectRandomnessAsync(projectRoot);\n      }\n    } // Wait 100ms and then try again\n    await delayAsync(100);\n    return _connectToNgrokAsync(projectRoot, args, hostnameAsync, null, attempts + 1);\n  }\n}\n\nexport async function startTunnelsAsync(projectRoot: string) {\n  let username = await UserManager.getCurrentUsernameAsync();\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    throw new XDLError(\n      ErrorCode.NO_PACKAGER_PORT,\n      `No packager found for project at ${projectRoot}.`\n    );\n  }\n  if (!packagerInfo.expoServerPort) {\n    throw new XDLError(\n      ErrorCode.NO_EXPO_SERVER_PORT,\n      `No Expo server found for project at ${projectRoot}.`\n    );\n  }\n  await stopTunnelsAsync(projectRoot);\n  if (await Android.startAdbReverseAsync(projectRoot)) {\n    ProjectUtils.logInfo(\n      projectRoot,\n      'expo',\n      'Successfully ran `adb reverse`. Localhost URLs should work on the connected Android device.'\n    );\n  }\n  let packageShortName = path.parse(projectRoot).base;\n  let expRc = await ProjectUtils.readExpRcAsync(projectRoot);\n\n  let startedTunnelsSuccessfully = false;\n\n  // Some issues with ngrok cause it to hang indefinitely. After\n  // TUNNEL_TIMEOUTms we just throw an error.\n  await Promise.race([\n    (async () => {\n      await delayAsync(TUNNEL_TIMEOUT);\n      if (!startedTunnelsSuccessfully) {\n        throw new Error('Starting tunnels timed out');\n      }\n    })(),\n    (async () => {\n      let expoServerNgrokUrl = await _connectToNgrokAsync(\n        projectRoot,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: packagerInfo.expoServerPort,\n          proto: 'http',\n        },\n        async () => {\n          let randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await Exp.getProjectRandomnessAsync(projectRoot);\n          return [\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      let packagerNgrokUrl = await _connectToNgrokAsync(\n        projectRoot,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: packagerInfo.packagerPort,\n          proto: 'http',\n        },\n        async () => {\n          let randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await Exp.getProjectRandomnessAsync(projectRoot);\n          return [\n            'packager',\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n        expoServerNgrokUrl,\n        packagerNgrokUrl,\n        ngrokPid: ngrok.process().pid,\n      });\n\n      startedTunnelsSuccessfully = true;\n\n      ProjectUtils.logWithLevel(\n        projectRoot,\n        'info',\n        {\n          tag: 'expo',\n          _expoEventType: 'TUNNEL_READY',\n        },\n        'Tunnel ready.'\n      );\n\n      ngrok.addListener('statuschange', status => {\n        if (status === 'reconnecting') {\n          ProjectUtils.logError(\n            projectRoot,\n            'expo',\n            'We noticed your tunnel is having issues. This may be due to intermittent problems with our tunnel provider. If you have trouble connecting to your app, try to Restart the project, or switch Host to LAN.'\n          );\n        } else if (status === 'online') {\n          ProjectUtils.logInfo(projectRoot, 'expo', 'Tunnel connected.');\n        }\n      });\n    })(),\n  ]);\n}\nexport async function stopTunnelsAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot); // This will kill all ngrok tunnels in the process. // We'll need to change this if we ever support more than one project // open at a time in XDE.\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  let ngrokProcess = ngrok.process();\n  let ngrokProcessPid = ngrokProcess ? ngrokProcess.pid : null;\n  ngrok.removeAllListeners('statuschange');\n  if (packagerInfo.ngrokPid && packagerInfo.ngrokPid !== ngrokProcessPid) {\n    // Ngrok is running in some other process. Kill at the os level.\n    try {\n      process.kill(packagerInfo.ngrokPid);\n    } catch (e) {\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `Couldn't kill ngrok with PID ${packagerInfo.ngrokPid}`\n      );\n    }\n  } else {\n    // Ngrok is running from the current process. Kill using ngrok api.\n    await ngrokKillAsync();\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerNgrokUrl: null,\n    packagerNgrokUrl: null,\n    ngrokPid: null,\n  });\n  await Android.stopAdbReverseAsync(projectRoot);\n}\n\nexport async function setOptionsAsync(\n  projectRoot: string,\n  options: {\n    packagerPort?: number,\n  }\n) {\n  _assertValidProjectRoot(projectRoot); // Check to make sure all options are valid\n  let schema = joi.object().keys({\n    packagerPort: joi.number().integer(),\n  });\n  try {\n    await joiValidateAsync(options, schema);\n  } catch (e) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, e.toString());\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, options);\n}\nexport async function getUrlAsync(projectRoot: string, options: Object = {}) {\n  _assertValidProjectRoot(projectRoot);\n  return await UrlUtils.constructManifestUrlAsync(projectRoot, options);\n}\n\nexport async function startAsync(\n  projectRoot: string,\n  options: Object = {},\n  verbose: boolean = true\n): Promise<any> {\n  _assertValidProjectRoot(projectRoot);\n  Analytics.logEvent('Start Project', {\n    projectRoot,\n    developerTool: Config.developerTool,\n  });\n  await startExpoServerAsync(projectRoot);\n  await startReactNativeServerAsync(projectRoot, options, verbose);\n  if (!Config.offline) {\n    try {\n      await startTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error starting tunnel ${e.message}`);\n    }\n  }\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  DevSession.startSession(projectRoot, exp);\n  return exp;\n}\nasync function _stopInternalAsync(projectRoot: string): Promise<void> {\n  DevSession.stopSession();\n  await stopExpoServerAsync(projectRoot);\n  await stopReactNativeServerAsync(projectRoot);\n  if (!Config.offline) {\n    try {\n      await stopTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping ngrok ${e.message}`);\n    }\n  }\n}\nexport async function stopAsync(projectDir: string): Promise<void> {\n  const result = await Promise.race([\n    _stopInternalAsync(projectDir),\n    new Promise((resolve, reject) => setTimeout(resolve, 2000, 'stopFailed')),\n  ]);\n  if (result === 'stopFailed') {\n    // find RN packager and ngrok pids, attempt to kill them manually\n    const { packagerPid, ngrokPid } = await ProjectSettings.readPackagerInfoAsync(projectDir);\n    if (packagerPid) {\n      try {\n        process.kill(packagerPid);\n      } catch (e) {}\n    }\n    if (ngrokPid) {\n      try {\n        process.kill(ngrokPid);\n      } catch (e) {}\n    }\n    await ProjectSettings.setPackagerInfoAsync(projectDir, {\n      expoServerPort: null,\n      packagerPort: null,\n      packagerPid: null,\n      expoServerNgrokUrl: null,\n      packagerNgrokUrl: null,\n      ngrokPid: null,\n    });\n  }\n}\n"],"sourceRoot":"/xdl@50.9.0/src"}