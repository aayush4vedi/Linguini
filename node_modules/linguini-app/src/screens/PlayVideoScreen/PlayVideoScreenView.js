import React from 'react';
import PropTypes from 'prop-types';
import { ActivityIndicator, TouchableOpacity, View } from 'react-native';
import { NavigationActions } from 'react-navigation';
import { Video } from 'expo';
import { Feather } from '@expo/vector-icons';
import { Icon, NavigationButton } from '../../components';
import { getParam } from '../../utils/navHelpers';
import { headerStyle, colors } from '../../styles';
import s from './styles';
import axios from 'axios';
import { Tile } from 'react-native-elements';
var server = require('../../../config')
const PlayVideoScreen = (props) => {
  const {
    videoUrl,
    isError,
    isLoading,
    isPlaying,
    onError,
    onLoad,
    onTogglePlaying,
  } = props;

  const icon = isError ? (
    <Icon
      size={50}
      IconSet={Feather}
      iconName="refresh-ccw"
      color={colors.white}
    />
  ) : (
    <Icon
      size={50}
      IconSet={Feather}
      iconName="play"
      color={colors.white}
      iconStyle={s.playIcon}
    />
  );

  return (
    <View style={s.root}>
      <Video
        source={{ uri: videoUrl }}
        style={s.video}
        shouldPlay={isPlaying}
        resizeMode="contain"
        useNativeControls={isPlaying}
        onLoad={onLoad}
        onError={onError}
      />
      {!isPlaying && (
        <TouchableOpacity
          style={[s.button, isError && s.playButtonError]}
          onPress={onTogglePlaying}
        >
          {isLoading
            ? <ActivityIndicator size="large" color={colors.white} />
            : icon}
        </TouchableOpacity>
      )}
    </View>
  );
};

PlayVideoScreen.propTypes = {
  videoUrl: PropTypes.string,
  isError: PropTypes.bool,
  isLoading: PropTypes.bool,
  isPlaying: PropTypes.bool,
  onError: PropTypes.func,
  onLoad: PropTypes.func,
  onTogglePlaying: PropTypes.func,
};

async function dashBoardRenderer (uID) {
  try {
  console.log('user id: ', uID);
   let formData = new FormData();
   formData.append("user-id",uID);
   let response = await fetch(
    server.dashboardServer,
    {
      method: "POST",
      headers:{
        "Content-Type":"application/x-www-form-urlencoded"
      },
      // body: formData
      body: `user-id=${uID}`
   }
  );
  console.log("here");
  
  console.log(await response.json());
  
  } catch (errors) {

   alert(errors);
  } 
}

uploadHandler = (uri,title) => {
  console.log('inside upload handler');
  console.log('uri from app: ',uri);
  console.log('title from app: ',title);
  
  

  const formData = new FormData();
  // formData.append('uri',new File([""],{name:uri,size:0,type:'video/mp4'}));
  // formData.append('title',title);
  formData.append('uri', {
    uri: uri,
    name: title,
    type: `video/mpeg`
  });
  formData.append('title',title);
  axios.post(server.uploadServer,formData)
    .then(res =>{
      console.log(res);
      alert("Uploaded!");
      console.log("SUCCESS!");
    });
}

PlayVideoScreen.navigationOptions = ({ navigation }) => ({
  ...headerStyle,
  title: getParam(navigation, 'title'),
  headerRight: (
    <View style={{flex: 1, flexDirection: 'row'}}>
      <NavigationButton
        text="Delete"
        enabled
        onPress={() => {
          getParam(navigation, 'remove')();//delete the video
          navigation.dispatch(NavigationActions.back({ key: null }));//pop the video
        }}
      />
      <NavigationButton
        text="Upload"
        enabled
        onPress={() => {
          console.log("url: ", navigation.state.params.videoUrl);
          this.uploadHandler(navigation.state.params.videoUrl,navigation.state.params.title);
          console.log("Uploading Video...");
          // alert("Video is being Uploaded...")
        }}
      />
      </View>
  
  ),
});

export default PlayVideoScreen;
