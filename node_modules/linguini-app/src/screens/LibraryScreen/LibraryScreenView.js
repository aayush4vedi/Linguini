import React from 'react';
import T from 'prop-types';
import { View ,FlatList,Text} from 'react-native';
import SegmentedControlTab from 'react-native-segmented-control-tab';
import { getParamOr } from '../../utils/navHelpers';
import { globalStyles, headerStyle } from '../../styles';
import { MediaList, AudioPlayer,NavigationButton } from '../../components';
import { AudioItem, VideoItem } from './components';
import s from './styles';
import Table from 'react-native-simple-table'
import { Icon,Button } from 'react-native-elements'
var server =require('../../../config')
const tabs = [
  // 'Audio',
  'Local',
  'Online',
];

const columns = [
  {
    title: 'Key',
    dataIndex: 'key',
    width: 160
  },
  {
    title: 'Size(Kb)',
    dataIndex: 'size',
    width: 120
  },
  {
    title: 'Date',
    dataIndex: 'date'
  }
];
async function dashBoardRenderer (uID) {
  try {
    console.log('Reloding... ');
    let response = await fetch(server.dashboardServer,{
      method: 'POST',
      headers:{
        "Content-Type":"application/x-www-form-urlencoded"
      },
      body: `user-id=${uID}`,
    })
    let data = await response.json();
    // console.log(data);
    list = data.map(user => (
      {key: user.Key,size:user.Size/1000,date:new Date(user.LastModified).toLocaleString()})
    )
    console.log("list: ",list);
    // alert(list.forEach(list => {list.key
    //     })
    // );
    return await list;


  } catch (errors) {
    console.log("err: ",errors);
    alert(errors);
  } 
}
var bigData;
const LibraryScreenView = ({
  selectedTabIndex,
  audioItems,
  playingAudio,
  playAudio,
  stopPlayingAudio,
  removeAudio,
  isPlaying,
  position,
  duration,
  isLoading,
  onTogglePlaying,
  onCompleteSliding,
  onStartSliding,
  showPlayer,
  videoItems,
  playVideo,
  removeVideo,
  // uploadVideo,
}) => (
  <View style={[globalStyles.fillAll, globalStyles.withWhiteBackground]}>
    <View style={s.container}>
      

      {selectedTabIndex === 0 /* Video */ && (
        <MediaList
          items={videoItems}
          onPress={playVideo}
          noItemsTitle="Your local videos will appear here."
          noItemsCaption="Your local videos will be appear here"
          ListItem={VideoItem}
          removeVideo={removeVideo}
          // uploadVideo={uploadVideo}
          rowDirection
        />
      )}
      {selectedTabIndex === 1 /* online */ && (
        <View style={{flex:1,
          alignItems:'center',
          justifyContent:'center',}}>
          <Button
            title="Reload"
            loading
            titleStyle={{ fontWeight: "700" }}
            buttonStyle={{
              backgroundColor: '#F66C23',
              width: 100,
              height: 30,
              borderColor: "transparent",
              borderWidth: 0,
              borderRadius: 20,
              
            }}
            containerStyle={{ marginTop: 20 }}
            enabled
            //'#F66C23'
            onPress={() => {
              var uID = 'user_id'
              dashBoardRenderer(uID)
              // .then((list)=> console.log('list from inst: ',list))
              .then(
                // bigData=list
                (list)=>{bigData=list}
              )
              .then(
                console.log('bigData: ',bigData)
                
              )
            }
          }
          />
          {/* <FlatList          
            data={bigData}
            renderItem={({item}) => <Text>{item.key}</Text>} */}

            {/* // renderItem={ */}
              {/* // dashBoardRenderer('user_id')
              // .then(
              //   // (list)=> console.log('.............list from inst: ',list)
              //   // ({list:list})=><Text>{list.key}</Text>
              //   (list)=> list.forEach(list => {
              //     console.log('.............key: ',list.key); */}
              {/* //     <Text>list.key</Text>
              //   })

              // )

              // ({item}) => 
              //   <Text>{item.key}</Text>
              // }

              // ({item}) => {
              //   console.log('.........................................here is your thing',item);
              //   <Text>{item.key}</Text>
              // }
            // }         
          // />  */}
          <Table height={1500} columnWidth={120} columns={columns} dataSource={bigData} />
        </View>
      )}
      

    </View>
  </View>
);

LibraryScreenView.propTypes = {
  selectedTabIndex: T.number,
  audioItems: T.arrayOf(T.object),
  playingAudio: T.func,
  playAudio: T.func,
  stopPlayingAudio: T.func,
  removeAudio: T.func,
  isPlaying: T.bool,
  position: T.number,
  duration: T.number,
  isLoading: T.bool,
  onTogglePlaying: T.func,
  onCompleteSliding: T.func,
  onStartSliding: T.func,
  showPlayer: T.bool,
  videoItems: T.arrayOf(T.object),
  playVideo: T.func,
  removeVideo: T.func,
  // uploadVideo: T.func,
};

LibraryScreenView.navigationOptions = ({ navigation }) => ({
  headerTitle: (
    <SegmentedControlTab
      values={tabs}
      selectedIndex={getParamOr(navigation, 'selectedTabIndex', 0)}
      onTabPress={getParamOr(navigation, 'changeTab', () => {})}
      tabsContainerStyle={s.tabsContainer}
      tabTextStyle={s.tabText}
      activeTabStyle={s.activeTab}
      tabStyle={s.tabStyle}
    />
  ),
  ...headerStyle,
  title: 'Library',
});

export default LibraryScreenView;
